(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))a(n);new MutationObserver(n=>{for(const r of n)if(r.type==="childList")for(const s of r.addedNodes)s.tagName==="LINK"&&s.rel==="modulepreload"&&a(s)}).observe(document,{childList:!0,subtree:!0});function o(n){const r={};return n.integrity&&(r.integrity=n.integrity),n.referrerPolicy&&(r.referrerPolicy=n.referrerPolicy),n.crossOrigin==="use-credentials"?r.credentials="include":n.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function a(n){if(n.ep)return;n.ep=!0;const r=o(n);fetch(n.href,r)}})();const f=()=>{const t=document.querySelector(".show-hide"),e=document.querySelector(".comment-wrapper");e.style.display="none",t.onclick=()=>{t.textContent==="Show comments"?(t.textContent="Hide comments",e.style.display="block"):(t.textContent="Show comments",e.style.display="none")}},h=t=>{const e=document.querySelector(".more_bears");e.innerHTML="",t.forEach(o=>{e.innerHTML+=`
          <div>
              <h3>${o.name} (${o.binomial})</h3>
              <img src="${o.image}" alt="${o.name}" style="width:200px; height:auto;">
              <p><strong>Range:</strong> ${o.range}</p>
          </div>
      `})},g=()=>{const t=document.querySelector(".comment-form"),e=document.querySelector("#name"),o=document.querySelector("#comment"),a=document.querySelector(".comment-container");if(!t||!e||!o||!a){console.error("Required elements are missing in the DOM.");return}t.onsubmit=n=>{n.preventDefault();const r=document.createElement("li"),s=document.createElement("p"),c=document.createElement("p"),i=e.value,m=o.value;s.textContent=i,c.textContent=m,a.appendChild(r),r.appendChild(s),r.appendChild(c),e.value="",o.value=""}},l="https://en.wikipedia.org/w/api.php",w=(t,e)=>t.imageinfo&&t.imageinfo.length>0?t.imageinfo[0].url:e,y=async t=>{const e="/media/placeholder.png";try{const o={action:"query",titles:`File:${t}`,prop:"imageinfo",iiprop:"url",format:"json",origin:"*"},a=`${l}?${new URLSearchParams(o).toString()}`,n=await fetch(a);if(!n.ok)throw new Error(`Network response was not ok: ${n.statusText}`);const s=(await n.json()).query,c=Object.values(s.pages)[0];return w(c,e)}catch(o){return console.error(`Error fetching image for ${t}:`,o),e}},S=async t=>{try{const e=`${l}?${new URLSearchParams(t).toString()}`,o=await fetch(e);if(!o.ok)throw new Error(`Network response was not ok: ${o.statusText}`);return(await o.json()).parse.wikitext["*"]}catch(e){throw console.error("Error fetching bear data",e),e}},b=async t=>{const e=t.split("{{Species table/end}}"),o=[];for(const a of e){const n=a.split("{{Species table/row");for(const r of n){const s=r.match(/\|name=\[\[(.*?)\]\]/),c=r.match(/\|binomial=(.*?)\n/),i=r.match(/\|image=(.*?)\n/),m=r.match(/\|range=([^|]*)/);if(s&&c&&i&&m){const u=i[1].trim().replace("File:",""),d=await y(u),p={name:s[1],binomial:c[1],image:d,range:m[1].trim()};o.push(p)}}}return o},x={action:"parse",page:"List_of_ursids",prop:"wikitext",section:"3",format:"json",origin:"*"},$=async()=>{f(),g();try{const t=await S(x),e=await b(t);h(e)}catch(t){console.error("Error initializing application:",t)}};$();
